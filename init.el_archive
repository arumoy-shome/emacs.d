#    -*- mode: emacs-lisp -*-

;; I am using a 'homegrown citation manager, relying on org and a set of convensions.
(use-package org-ref
  :disabled t
  :after org
  :straight t
  :init
  (setq reftex-default-bibliography '("~/org/bib/ref.bib")
        org-ref-bibliography-notes "~/org/bib/notes.org"
        org-ref-default-bibliography '("~/org/bib/ref.bib")
        org-ref-pdf-directory "~/org/bib/pdfs/")
  (setq bibtex-completion-bibliography reftex-default-bibliography
        bibtex-completion-library-path org-ref-pdf-directory
        bibtex-completion-notes-path org-ref-bibliography-notes)
  :commands
  (doi-add-bibtex-entry)
  :bind
  ("C-c ]" . org-ref-helm-insert-cite-link))

(use-package ido
  :disabled t
  :config
  (ido-mode +1)
  (ido-everywhere +1)
  (setq ido-enable-flex-matching t)
  (setq ido-use-filename-at-point 'guess)
  (setq ido-enable-dot-prefix t))

(use-package projectile
  :disabled t
  :straight t
  :config
  (setq projectile-completion-system 'default) ; use selectrum instead of ido
  (setq projectile-switch-project-action 'projectile-commander) ; ask what to do when switching

  (def-projectile-commander-method ?\C-m
    "Find file in project."
    (call-interactively #'find-file))

  (projectile-mode +1)

  (defun aru/projectile-indexing-method-p (method)
    "Non-nil if METHOD is a safe value for `projectile-indexing-method'."
    (memq method '(native alien)))

  (put 'projectile-indexing-method 'safe-local-variable
       #'aru/projectile-indexing-method-p)

  (dolist (key '("C-r" "R"))
    (bind-key key #'projectile-replace-regexp projectile-command-map))
  :bind-keymap*
  (("C-c p" . projectile-command-map))
  :blackout t)

(use-package windmove
  :disabled t
  :bind
  (("<left>"  . windmove-left)
   ("<right>" . windmove-right)
   ("<up>"    . windmove-up)
   ("<down>"  . windmove-down)))

(use-package fish-mode
  :disabled t
  :straight t
  :mode ("\\.fish\\'" .	fish-mode))

(use-package exec-path-from-shell
  :disabled t
  :straight t
  :if (memq window-system '(mac ns))
  :hook
  (after-init . exec-path-from-shell-initialize))

(use-package smartparens
  :disabled t
  :straight t
  :config
  (require 'smartparens-config)
  :hook ((prog-mode . smartparens-mode)
	 (text-mode . smartparens-mode))
  :blackout t)

(use-package mu4e
  :commands
  (mu4e)
  :config
  (mu4e-maildir "~/mail")
  ;; mu4e binary comes with mu which I install with brewn
  :load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")

(use-package evil-magit :straight t :after magit)

(use-package evil
  :straight t
  :init
  (setq evil-want-C-u-scroll t
        evil-want-C-u-delete t
        evil-split-window-below t
        evil-vsplit-window-right t)
  :config
  (evil-mode 1)
  (evil-set-initial-state 'term-mode 'emacs))

(use-package evil-surround
  :straight t
  :after (evil)
  :config (global-evil-surround-mode 1))

(use-package evil-commentary
  :straight t
  :after (evil)
  :config (evil-commentary-mode))

(use-package linum-relative
  :straight t
  :config (linum-relative-global-mode))
